// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open SyntaxTree

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | SHOOT
  | ANNOUNCE
  | ON
  | DO
  | END
  | NORTH
  | SOUTH
  | EAST
  | WEST
  | SEEK
  | MOVE
  | MY_NAME_IS
  | STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_SHOOT
    | TOKEN_ANNOUNCE
    | TOKEN_ON
    | TOKEN_DO
    | TOKEN_END
    | TOKEN_NORTH
    | TOKEN_SOUTH
    | TOKEN_EAST
    | TOKEN_WEST
    | TOKEN_SEEK
    | TOKEN_MOVE
    | TOKEN_MY_NAME_IS
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_script
    | NONTERM_commandList
    | NONTERM_command
    | NONTERM_move
    | NONTERM_shoot
    | NONTERM_name
    | NONTERM_announce
    | NONTERM_on
    | NONTERM_direction

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | SHOOT  -> 1 
  | ANNOUNCE  -> 2 
  | ON  -> 3 
  | DO  -> 4 
  | END  -> 5 
  | NORTH  -> 6 
  | SOUTH  -> 7 
  | EAST  -> 8 
  | WEST  -> 9 
  | SEEK  -> 10 
  | MOVE  -> 11 
  | MY_NAME_IS  -> 12 
  | STRING _ -> 13 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_SHOOT 
  | 2 -> TOKEN_ANNOUNCE 
  | 3 -> TOKEN_ON 
  | 4 -> TOKEN_DO 
  | 5 -> TOKEN_END 
  | 6 -> TOKEN_NORTH 
  | 7 -> TOKEN_SOUTH 
  | 8 -> TOKEN_EAST 
  | 9 -> TOKEN_WEST 
  | 10 -> TOKEN_SEEK 
  | 11 -> TOKEN_MOVE 
  | 12 -> TOKEN_MY_NAME_IS 
  | 13 -> TOKEN_STRING 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_script 
    | 3 -> NONTERM_commandList 
    | 4 -> NONTERM_commandList 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_command 
    | 9 -> NONTERM_command 
    | 10 -> NONTERM_move 
    | 11 -> NONTERM_shoot 
    | 12 -> NONTERM_name 
    | 13 -> NONTERM_announce 
    | 14 -> NONTERM_on 
    | 15 -> NONTERM_direction 
    | 16 -> NONTERM_direction 
    | 17 -> NONTERM_direction 
    | 18 -> NONTERM_direction 
    | 19 -> NONTERM_direction 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | SHOOT  -> "SHOOT" 
  | ANNOUNCE  -> "ANNOUNCE" 
  | ON  -> "ON" 
  | DO  -> "DO" 
  | END  -> "END" 
  | NORTH  -> "NORTH" 
  | SOUTH  -> "SOUTH" 
  | EAST  -> "EAST" 
  | WEST  -> "WEST" 
  | SEEK  -> "SEEK" 
  | MOVE  -> "MOVE" 
  | MY_NAME_IS  -> "MY_NAME_IS" 
  | STRING _ -> "STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | SHOOT  -> (null : System.Object) 
  | ANNOUNCE  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | NORTH  -> (null : System.Object) 
  | SOUTH  -> (null : System.Object) 
  | EAST  -> (null : System.Object) 
  | WEST  -> (null : System.Object) 
  | SEEK  -> (null : System.Object) 
  | MOVE  -> (null : System.Object) 
  | MY_NAME_IS  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 3us; 65535us; 0us; 3us; 4us; 5us; 21us; 22us; 3us; 65535us; 0us; 4us; 4us; 4us; 21us; 4us; 3us; 65535us; 0us; 6us; 4us; 6us; 21us; 6us; 3us; 65535us; 0us; 7us; 4us; 7us; 21us; 7us; 3us; 65535us; 0us; 8us; 4us; 8us; 21us; 8us; 3us; 65535us; 0us; 9us; 4us; 9us; 21us; 9us; 3us; 65535us; 0us; 10us; 4us; 10us; 21us; 10us; 2us; 65535us; 11us; 12us; 13us; 14us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 9us; 13us; 17us; 21us; 25us; 29us; 33us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; |]
let _fsyacc_action_rows = 29
let _fsyacc_actionTableElements = [|5us; 32768us; 1us; 13us; 2us; 17us; 3us; 19us; 11us; 11us; 12us; 15us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 5us; 16387us; 1us; 13us; 2us; 17us; 3us; 19us; 11us; 11us; 12us; 15us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 5us; 32768us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 0us; 16394us; 5us; 32768us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 28us; 0us; 16395us; 1us; 32768us; 13us; 16us; 0us; 16396us; 1us; 32768us; 13us; 18us; 0us; 16397us; 1us; 32768us; 13us; 20us; 1us; 32768us; 4us; 21us; 5us; 32768us; 1us; 13us; 2us; 17us; 3us; 19us; 11us; 11us; 12us; 15us; 1us; 32768us; 5us; 23us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 8us; 9us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 27us; 28us; 34us; 35us; 37us; 38us; 40us; 41us; 43us; 45us; 51us; 53us; 54us; 55us; 56us; 57us; 58us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 5us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 10us; 10us; 10us; 10us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 65535us; 16394us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; |]
let _fsyacc_reductions ()  =    [| 
# 172 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  SyntaxTree.Command list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 181 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'script)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                     _1 
                   )
# 20 "Parser.fsy"
                 :  SyntaxTree.Command list ));
# 192 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                                      _1 
                   )
# 23 "Parser.fsy"
                 : 'script));
# 203 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                                  [_1] 
                   )
# 26 "Parser.fsy"
                 : 'commandList));
# 214 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "Parser.fsy"
                                              _1::_2 
                   )
# 27 "Parser.fsy"
                 : 'commandList));
# 226 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'move)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                               _1 
                   )
# 30 "Parser.fsy"
                 : 'command));
# 237 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'shoot)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "Parser.fsy"
                                _1 
                   )
# 31 "Parser.fsy"
                 : 'command));
# 248 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                               _1 
                   )
# 32 "Parser.fsy"
                 : 'command));
# 259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'announce)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                   _1 
                   )
# 33 "Parser.fsy"
                 : 'command));
# 270 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'on)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                             _1 
                   )
# 34 "Parser.fsy"
                 : 'command));
# 281 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                         Move _2 
                   )
# 37 "Parser.fsy"
                 : 'move));
# 292 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                          Shoot _2 
                   )
# 40 "Parser.fsy"
                 : 'shoot));
# 303 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                            Name _2 
                   )
# 43 "Parser.fsy"
                 : 'name));
# 314 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                          Announce _2 
                   )
# 46 "Parser.fsy"
                 : 'announce));
# 325 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                       On(_2, _4) 
                   )
# 49 "Parser.fsy"
                 : 'on));
# 337 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                North 
                   )
# 52 "Parser.fsy"
                 : 'direction));
# 347 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                South 
                   )
# 53 "Parser.fsy"
                 : 'direction));
# 357 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                               East 
                   )
# 54 "Parser.fsy"
                 : 'direction));
# 367 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                               West 
                   )
# 55 "Parser.fsy"
                 : 'direction));
# 377 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                               Seek 
                   )
# 56 "Parser.fsy"
                 : 'direction));
|]
# 388 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  SyntaxTree.Command list  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
