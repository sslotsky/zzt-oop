// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open SyntaxTree
open MusicSyntax

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | SAX
  | GUITAR
  | KEYS
  | MAJOR
  | HMINOR
  | MMINORASC
  | MMINORDESC
  | REST
  | WHOLE
  | HALF
  | QUARTER
  | EIGHTH
  | SIXTEENTH
  | THIRTY_SECOND
  | TIME_AND_A_HALF
  | ONE_THIRD
  | SHARP
  | FLAT
  | NATURAL
  | OCTAVE_UP
  | OCTAVE_DOWN
  | A_PITCH
  | B_PITCH
  | C_PITCH
  | D_PITCH
  | E_PITCH
  | F_PITCH
  | G_PITCH
  | BPM of (int)
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | EOF
  | SHOOT
  | ANNOUNCE
  | ON
  | DO
  | END
  | NORTH
  | SOUTH
  | EAST
  | WEST
  | SEEK
  | FLOW
  | IDLE
  | CW
  | CCW
  | RNDP
  | OPP
  | ALIGNED
  | TOUCHING
  | BLOCKED
  | ENERGIZED
  | IF
  | THEN
  | ELSE
  | UNLESS
  | SET
  | CLEAR
  | MOVE
  | GO
  | WALK
  | PLAY_MUSIC
  | MY_NAME_IS
  | ID of (string)
  | STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_SAX
    | TOKEN_GUITAR
    | TOKEN_KEYS
    | TOKEN_MAJOR
    | TOKEN_HMINOR
    | TOKEN_MMINORASC
    | TOKEN_MMINORDESC
    | TOKEN_REST
    | TOKEN_WHOLE
    | TOKEN_HALF
    | TOKEN_QUARTER
    | TOKEN_EIGHTH
    | TOKEN_SIXTEENTH
    | TOKEN_THIRTY_SECOND
    | TOKEN_TIME_AND_A_HALF
    | TOKEN_ONE_THIRD
    | TOKEN_SHARP
    | TOKEN_FLAT
    | TOKEN_NATURAL
    | TOKEN_OCTAVE_UP
    | TOKEN_OCTAVE_DOWN
    | TOKEN_A_PITCH
    | TOKEN_B_PITCH
    | TOKEN_C_PITCH
    | TOKEN_D_PITCH
    | TOKEN_E_PITCH
    | TOKEN_F_PITCH
    | TOKEN_G_PITCH
    | TOKEN_BPM
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_EOF
    | TOKEN_SHOOT
    | TOKEN_ANNOUNCE
    | TOKEN_ON
    | TOKEN_DO
    | TOKEN_END
    | TOKEN_NORTH
    | TOKEN_SOUTH
    | TOKEN_EAST
    | TOKEN_WEST
    | TOKEN_SEEK
    | TOKEN_FLOW
    | TOKEN_IDLE
    | TOKEN_CW
    | TOKEN_CCW
    | TOKEN_RNDP
    | TOKEN_OPP
    | TOKEN_ALIGNED
    | TOKEN_TOUCHING
    | TOKEN_BLOCKED
    | TOKEN_ENERGIZED
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_UNLESS
    | TOKEN_SET
    | TOKEN_CLEAR
    | TOKEN_MOVE
    | TOKEN_GO
    | TOKEN_WALK
    | TOKEN_PLAY_MUSIC
    | TOKEN_MY_NAME_IS
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_script
    | NONTERM_commandList
    | NONTERM_command
    | NONTERM_set
    | NONTERM_clear
    | NONTERM_conditional
    | NONTERM_flag
    | NONTERM_userDefined
    | NONTERM_move
    | NONTERM_go
    | NONTERM_walk
    | NONTERM_shoot
    | NONTERM_name
    | NONTERM_announce
    | NONTERM_on
    | NONTERM_direction
    | NONTERM_playMusic
    | NONTERM_song
    | NONTERM_phrase
    | NONTERM_noteGroups
    | NONTERM_noteGroup
    | NONTERM_duration
    | NONTERM_musicNoteList
    | NONTERM_musicNote
    | NONTERM_noteName
    | NONTERM_key
    | NONTERM_keyName
    | NONTERM_tempo
    | NONTERM_voiceList
    | NONTERM_voice
    | NONTERM_instrument

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | SAX  -> 0 
  | GUITAR  -> 1 
  | KEYS  -> 2 
  | MAJOR  -> 3 
  | HMINOR  -> 4 
  | MMINORASC  -> 5 
  | MMINORDESC  -> 6 
  | REST  -> 7 
  | WHOLE  -> 8 
  | HALF  -> 9 
  | QUARTER  -> 10 
  | EIGHTH  -> 11 
  | SIXTEENTH  -> 12 
  | THIRTY_SECOND  -> 13 
  | TIME_AND_A_HALF  -> 14 
  | ONE_THIRD  -> 15 
  | SHARP  -> 16 
  | FLAT  -> 17 
  | NATURAL  -> 18 
  | OCTAVE_UP  -> 19 
  | OCTAVE_DOWN  -> 20 
  | A_PITCH  -> 21 
  | B_PITCH  -> 22 
  | C_PITCH  -> 23 
  | D_PITCH  -> 24 
  | E_PITCH  -> 25 
  | F_PITCH  -> 26 
  | G_PITCH  -> 27 
  | BPM _ -> 28 
  | LBRACE  -> 29 
  | RBRACE  -> 30 
  | LBRACKET  -> 31 
  | RBRACKET  -> 32 
  | EOF  -> 33 
  | SHOOT  -> 34 
  | ANNOUNCE  -> 35 
  | ON  -> 36 
  | DO  -> 37 
  | END  -> 38 
  | NORTH  -> 39 
  | SOUTH  -> 40 
  | EAST  -> 41 
  | WEST  -> 42 
  | SEEK  -> 43 
  | FLOW  -> 44 
  | IDLE  -> 45 
  | CW  -> 46 
  | CCW  -> 47 
  | RNDP  -> 48 
  | OPP  -> 49 
  | ALIGNED  -> 50 
  | TOUCHING  -> 51 
  | BLOCKED  -> 52 
  | ENERGIZED  -> 53 
  | IF  -> 54 
  | THEN  -> 55 
  | ELSE  -> 56 
  | UNLESS  -> 57 
  | SET  -> 58 
  | CLEAR  -> 59 
  | MOVE  -> 60 
  | GO  -> 61 
  | WALK  -> 62 
  | PLAY_MUSIC  -> 63 
  | MY_NAME_IS  -> 64 
  | ID _ -> 65 
  | STRING _ -> 66 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_SAX 
  | 1 -> TOKEN_GUITAR 
  | 2 -> TOKEN_KEYS 
  | 3 -> TOKEN_MAJOR 
  | 4 -> TOKEN_HMINOR 
  | 5 -> TOKEN_MMINORASC 
  | 6 -> TOKEN_MMINORDESC 
  | 7 -> TOKEN_REST 
  | 8 -> TOKEN_WHOLE 
  | 9 -> TOKEN_HALF 
  | 10 -> TOKEN_QUARTER 
  | 11 -> TOKEN_EIGHTH 
  | 12 -> TOKEN_SIXTEENTH 
  | 13 -> TOKEN_THIRTY_SECOND 
  | 14 -> TOKEN_TIME_AND_A_HALF 
  | 15 -> TOKEN_ONE_THIRD 
  | 16 -> TOKEN_SHARP 
  | 17 -> TOKEN_FLAT 
  | 18 -> TOKEN_NATURAL 
  | 19 -> TOKEN_OCTAVE_UP 
  | 20 -> TOKEN_OCTAVE_DOWN 
  | 21 -> TOKEN_A_PITCH 
  | 22 -> TOKEN_B_PITCH 
  | 23 -> TOKEN_C_PITCH 
  | 24 -> TOKEN_D_PITCH 
  | 25 -> TOKEN_E_PITCH 
  | 26 -> TOKEN_F_PITCH 
  | 27 -> TOKEN_G_PITCH 
  | 28 -> TOKEN_BPM 
  | 29 -> TOKEN_LBRACE 
  | 30 -> TOKEN_RBRACE 
  | 31 -> TOKEN_LBRACKET 
  | 32 -> TOKEN_RBRACKET 
  | 33 -> TOKEN_EOF 
  | 34 -> TOKEN_SHOOT 
  | 35 -> TOKEN_ANNOUNCE 
  | 36 -> TOKEN_ON 
  | 37 -> TOKEN_DO 
  | 38 -> TOKEN_END 
  | 39 -> TOKEN_NORTH 
  | 40 -> TOKEN_SOUTH 
  | 41 -> TOKEN_EAST 
  | 42 -> TOKEN_WEST 
  | 43 -> TOKEN_SEEK 
  | 44 -> TOKEN_FLOW 
  | 45 -> TOKEN_IDLE 
  | 46 -> TOKEN_CW 
  | 47 -> TOKEN_CCW 
  | 48 -> TOKEN_RNDP 
  | 49 -> TOKEN_OPP 
  | 50 -> TOKEN_ALIGNED 
  | 51 -> TOKEN_TOUCHING 
  | 52 -> TOKEN_BLOCKED 
  | 53 -> TOKEN_ENERGIZED 
  | 54 -> TOKEN_IF 
  | 55 -> TOKEN_THEN 
  | 56 -> TOKEN_ELSE 
  | 57 -> TOKEN_UNLESS 
  | 58 -> TOKEN_SET 
  | 59 -> TOKEN_CLEAR 
  | 60 -> TOKEN_MOVE 
  | 61 -> TOKEN_GO 
  | 62 -> TOKEN_WALK 
  | 63 -> TOKEN_PLAY_MUSIC 
  | 64 -> TOKEN_MY_NAME_IS 
  | 65 -> TOKEN_ID 
  | 66 -> TOKEN_STRING 
  | 69 -> TOKEN_end_of_input
  | 67 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_script 
    | 3 -> NONTERM_commandList 
    | 4 -> NONTERM_commandList 
    | 5 -> NONTERM_command 
    | 6 -> NONTERM_command 
    | 7 -> NONTERM_command 
    | 8 -> NONTERM_command 
    | 9 -> NONTERM_command 
    | 10 -> NONTERM_command 
    | 11 -> NONTERM_command 
    | 12 -> NONTERM_command 
    | 13 -> NONTERM_command 
    | 14 -> NONTERM_command 
    | 15 -> NONTERM_command 
    | 16 -> NONTERM_set 
    | 17 -> NONTERM_clear 
    | 18 -> NONTERM_conditional 
    | 19 -> NONTERM_conditional 
    | 20 -> NONTERM_conditional 
    | 21 -> NONTERM_conditional 
    | 22 -> NONTERM_conditional 
    | 23 -> NONTERM_flag 
    | 24 -> NONTERM_flag 
    | 25 -> NONTERM_flag 
    | 26 -> NONTERM_flag 
    | 27 -> NONTERM_flag 
    | 28 -> NONTERM_userDefined 
    | 29 -> NONTERM_move 
    | 30 -> NONTERM_go 
    | 31 -> NONTERM_walk 
    | 32 -> NONTERM_shoot 
    | 33 -> NONTERM_name 
    | 34 -> NONTERM_announce 
    | 35 -> NONTERM_on 
    | 36 -> NONTERM_direction 
    | 37 -> NONTERM_direction 
    | 38 -> NONTERM_direction 
    | 39 -> NONTERM_direction 
    | 40 -> NONTERM_direction 
    | 41 -> NONTERM_direction 
    | 42 -> NONTERM_direction 
    | 43 -> NONTERM_direction 
    | 44 -> NONTERM_direction 
    | 45 -> NONTERM_direction 
    | 46 -> NONTERM_direction 
    | 47 -> NONTERM_playMusic 
    | 48 -> NONTERM_song 
    | 49 -> NONTERM_song 
    | 50 -> NONTERM_song 
    | 51 -> NONTERM_song 
    | 52 -> NONTERM_song 
    | 53 -> NONTERM_song 
    | 54 -> NONTERM_song 
    | 55 -> NONTERM_song 
    | 56 -> NONTERM_phrase 
    | 57 -> NONTERM_noteGroups 
    | 58 -> NONTERM_noteGroups 
    | 59 -> NONTERM_noteGroup 
    | 60 -> NONTERM_duration 
    | 61 -> NONTERM_duration 
    | 62 -> NONTERM_duration 
    | 63 -> NONTERM_duration 
    | 64 -> NONTERM_duration 
    | 65 -> NONTERM_duration 
    | 66 -> NONTERM_duration 
    | 67 -> NONTERM_duration 
    | 68 -> NONTERM_musicNoteList 
    | 69 -> NONTERM_musicNoteList 
    | 70 -> NONTERM_musicNote 
    | 71 -> NONTERM_musicNote 
    | 72 -> NONTERM_musicNote 
    | 73 -> NONTERM_musicNote 
    | 74 -> NONTERM_musicNote 
    | 75 -> NONTERM_musicNote 
    | 76 -> NONTERM_musicNote 
    | 77 -> NONTERM_noteName 
    | 78 -> NONTERM_noteName 
    | 79 -> NONTERM_noteName 
    | 80 -> NONTERM_noteName 
    | 81 -> NONTERM_noteName 
    | 82 -> NONTERM_noteName 
    | 83 -> NONTERM_noteName 
    | 84 -> NONTERM_key 
    | 85 -> NONTERM_key 
    | 86 -> NONTERM_key 
    | 87 -> NONTERM_key 
    | 88 -> NONTERM_key 
    | 89 -> NONTERM_keyName 
    | 90 -> NONTERM_keyName 
    | 91 -> NONTERM_keyName 
    | 92 -> NONTERM_tempo 
    | 93 -> NONTERM_voiceList 
    | 94 -> NONTERM_voiceList 
    | 95 -> NONTERM_voice 
    | 96 -> NONTERM_voice 
    | 97 -> NONTERM_instrument 
    | 98 -> NONTERM_instrument 
    | 99 -> NONTERM_instrument 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 69 
let _fsyacc_tagOfErrorTerminal = 67

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | SAX  -> "SAX" 
  | GUITAR  -> "GUITAR" 
  | KEYS  -> "KEYS" 
  | MAJOR  -> "MAJOR" 
  | HMINOR  -> "HMINOR" 
  | MMINORASC  -> "MMINORASC" 
  | MMINORDESC  -> "MMINORDESC" 
  | REST  -> "REST" 
  | WHOLE  -> "WHOLE" 
  | HALF  -> "HALF" 
  | QUARTER  -> "QUARTER" 
  | EIGHTH  -> "EIGHTH" 
  | SIXTEENTH  -> "SIXTEENTH" 
  | THIRTY_SECOND  -> "THIRTY_SECOND" 
  | TIME_AND_A_HALF  -> "TIME_AND_A_HALF" 
  | ONE_THIRD  -> "ONE_THIRD" 
  | SHARP  -> "SHARP" 
  | FLAT  -> "FLAT" 
  | NATURAL  -> "NATURAL" 
  | OCTAVE_UP  -> "OCTAVE_UP" 
  | OCTAVE_DOWN  -> "OCTAVE_DOWN" 
  | A_PITCH  -> "A_PITCH" 
  | B_PITCH  -> "B_PITCH" 
  | C_PITCH  -> "C_PITCH" 
  | D_PITCH  -> "D_PITCH" 
  | E_PITCH  -> "E_PITCH" 
  | F_PITCH  -> "F_PITCH" 
  | G_PITCH  -> "G_PITCH" 
  | BPM _ -> "BPM" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | EOF  -> "EOF" 
  | SHOOT  -> "SHOOT" 
  | ANNOUNCE  -> "ANNOUNCE" 
  | ON  -> "ON" 
  | DO  -> "DO" 
  | END  -> "END" 
  | NORTH  -> "NORTH" 
  | SOUTH  -> "SOUTH" 
  | EAST  -> "EAST" 
  | WEST  -> "WEST" 
  | SEEK  -> "SEEK" 
  | FLOW  -> "FLOW" 
  | IDLE  -> "IDLE" 
  | CW  -> "CW" 
  | CCW  -> "CCW" 
  | RNDP  -> "RNDP" 
  | OPP  -> "OPP" 
  | ALIGNED  -> "ALIGNED" 
  | TOUCHING  -> "TOUCHING" 
  | BLOCKED  -> "BLOCKED" 
  | ENERGIZED  -> "ENERGIZED" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | UNLESS  -> "UNLESS" 
  | SET  -> "SET" 
  | CLEAR  -> "CLEAR" 
  | MOVE  -> "MOVE" 
  | GO  -> "GO" 
  | WALK  -> "WALK" 
  | PLAY_MUSIC  -> "PLAY_MUSIC" 
  | MY_NAME_IS  -> "MY_NAME_IS" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | SAX  -> (null : System.Object) 
  | GUITAR  -> (null : System.Object) 
  | KEYS  -> (null : System.Object) 
  | MAJOR  -> (null : System.Object) 
  | HMINOR  -> (null : System.Object) 
  | MMINORASC  -> (null : System.Object) 
  | MMINORDESC  -> (null : System.Object) 
  | REST  -> (null : System.Object) 
  | WHOLE  -> (null : System.Object) 
  | HALF  -> (null : System.Object) 
  | QUARTER  -> (null : System.Object) 
  | EIGHTH  -> (null : System.Object) 
  | SIXTEENTH  -> (null : System.Object) 
  | THIRTY_SECOND  -> (null : System.Object) 
  | TIME_AND_A_HALF  -> (null : System.Object) 
  | ONE_THIRD  -> (null : System.Object) 
  | SHARP  -> (null : System.Object) 
  | FLAT  -> (null : System.Object) 
  | NATURAL  -> (null : System.Object) 
  | OCTAVE_UP  -> (null : System.Object) 
  | OCTAVE_DOWN  -> (null : System.Object) 
  | A_PITCH  -> (null : System.Object) 
  | B_PITCH  -> (null : System.Object) 
  | C_PITCH  -> (null : System.Object) 
  | D_PITCH  -> (null : System.Object) 
  | E_PITCH  -> (null : System.Object) 
  | F_PITCH  -> (null : System.Object) 
  | G_PITCH  -> (null : System.Object) 
  | BPM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | SHOOT  -> (null : System.Object) 
  | ANNOUNCE  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | NORTH  -> (null : System.Object) 
  | SOUTH  -> (null : System.Object) 
  | EAST  -> (null : System.Object) 
  | WEST  -> (null : System.Object) 
  | SEEK  -> (null : System.Object) 
  | FLOW  -> (null : System.Object) 
  | IDLE  -> (null : System.Object) 
  | CW  -> (null : System.Object) 
  | CCW  -> (null : System.Object) 
  | RNDP  -> (null : System.Object) 
  | OPP  -> (null : System.Object) 
  | ALIGNED  -> (null : System.Object) 
  | TOUCHING  -> (null : System.Object) 
  | BLOCKED  -> (null : System.Object) 
  | ENERGIZED  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | UNLESS  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | CLEAR  -> (null : System.Object) 
  | MOVE  -> (null : System.Object) 
  | GO  -> (null : System.Object) 
  | WALK  -> (null : System.Object) 
  | PLAY_MUSIC  -> (null : System.Object) 
  | MY_NAME_IS  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 6us; 65535us; 0us; 3us; 4us; 5us; 25us; 26us; 28us; 29us; 35us; 36us; 59us; 60us; 6us; 65535us; 0us; 4us; 4us; 4us; 25us; 4us; 28us; 4us; 35us; 4us; 59us; 4us; 6us; 65535us; 0us; 13us; 4us; 13us; 25us; 13us; 28us; 13us; 35us; 13us; 59us; 13us; 6us; 65535us; 0us; 14us; 4us; 14us; 25us; 14us; 28us; 14us; 35us; 14us; 59us; 14us; 6us; 65535us; 0us; 15us; 4us; 15us; 25us; 15us; 28us; 15us; 35us; 15us; 59us; 15us; 6us; 65535us; 17us; 18us; 19us; 20us; 21us; 23us; 22us; 24us; 31us; 33us; 32us; 34us; 6us; 65535us; 17us; 43us; 19us; 43us; 21us; 43us; 22us; 43us; 31us; 43us; 32us; 43us; 6us; 65535us; 0us; 6us; 4us; 6us; 25us; 6us; 28us; 6us; 35us; 6us; 59us; 6us; 6us; 65535us; 0us; 7us; 4us; 7us; 25us; 7us; 28us; 7us; 35us; 7us; 59us; 7us; 6us; 65535us; 0us; 8us; 4us; 8us; 25us; 8us; 28us; 8us; 35us; 8us; 59us; 8us; 6us; 65535us; 0us; 9us; 4us; 9us; 25us; 9us; 28us; 9us; 35us; 9us; 59us; 9us; 6us; 65535us; 0us; 10us; 4us; 10us; 25us; 10us; 28us; 10us; 35us; 10us; 59us; 10us; 6us; 65535us; 0us; 11us; 4us; 11us; 25us; 11us; 28us; 11us; 35us; 11us; 59us; 11us; 6us; 65535us; 0us; 12us; 4us; 12us; 25us; 12us; 28us; 12us; 35us; 12us; 59us; 12us; 9us; 65535us; 40us; 41us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 69us; 70us; 71us; 72us; 73us; 74us; 75us; 76us; 6us; 65535us; 0us; 16us; 4us; 16us; 25us; 16us; 28us; 16us; 35us; 16us; 59us; 16us; 1us; 65535us; 78us; 79us; 6us; 65535us; 78us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 132us; 136us; 133us; 134us; 7us; 65535us; 78us; 92us; 82us; 92us; 84us; 92us; 86us; 92us; 93us; 94us; 132us; 92us; 133us; 92us; 7us; 65535us; 78us; 93us; 82us; 93us; 84us; 93us; 86us; 93us; 93us; 93us; 132us; 93us; 133us; 93us; 7us; 65535us; 78us; 95us; 82us; 95us; 84us; 95us; 86us; 95us; 93us; 95us; 132us; 95us; 133us; 95us; 2us; 65535us; 95us; 96us; 105us; 106us; 2us; 65535us; 95us; 105us; 105us; 105us; 4us; 65535us; 78us; 126us; 84us; 126us; 95us; 107us; 105us; 107us; 2us; 65535us; 78us; 82us; 84us; 86us; 2us; 65535us; 78us; 121us; 84us; 121us; 1us; 65535us; 78us; 84us; 5us; 65535us; 78us; 88us; 82us; 90us; 84us; 89us; 86us; 91us; 130us; 131us; 5us; 65535us; 78us; 130us; 82us; 130us; 84us; 130us; 86us; 130us; 130us; 130us; 1us; 65535us; 132us; 133us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 12us; 19us; 26us; 33us; 40us; 47us; 54us; 61us; 68us; 75us; 82us; 89us; 96us; 103us; 113us; 120us; 122us; 129us; 137us; 145us; 153us; 156us; 159us; 164us; 167us; 170us; 172us; 178us; 184us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 4us; 3us; 4us; 19us; 22us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 3us; 18us; 19us; 20us; 2us; 18us; 20us; 3us; 18us; 19us; 20us; 2us; 18us; 20us; 2us; 18us; 20us; 2us; 18us; 20us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 2us; 21us; 22us; 1us; 21us; 2us; 21us; 22us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 48us; 2us; 49us; 54us; 1us; 49us; 4us; 50us; 51us; 53us; 55us; 1us; 50us; 2us; 51us; 55us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 2us; 57us; 58us; 1us; 58us; 3us; 59us; 66us; 67us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 67us; 4us; 68us; 69us; 73us; 74us; 1us; 69us; 4us; 70us; 71us; 72us; 75us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 83us; 5us; 84us; 85us; 86us; 87us; 88us; 1us; 85us; 1us; 86us; 1us; 87us; 1us; 88us; 3us; 89us; 90us; 91us; 1us; 89us; 1us; 90us; 1us; 92us; 2us; 93us; 94us; 1us; 94us; 2us; 95us; 96us; 1us; 95us; 1us; 95us; 1us; 95us; 1us; 96us; 1us; 96us; 1us; 97us; 1us; 98us; 1us; 99us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 49us; 52us; 56us; 59us; 62us; 65us; 67us; 69us; 71us; 73us; 75us; 78us; 80us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 180us; 182us; 187us; 189us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 207us; 209us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 236us; 238us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 275us; 277us; 279us; 281us; 283us; 287us; 289us; 291us; 293us; 296us; 298us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 315us; |]
let _fsyacc_action_rows = 141
let _fsyacc_actionTableElements = [|12us; 32768us; 34us; 51us; 35us; 55us; 36us; 57us; 54us; 22us; 57us; 31us; 58us; 17us; 59us; 19us; 60us; 45us; 61us; 47us; 62us; 49us; 63us; 77us; 64us; 53us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 12us; 16387us; 34us; 51us; 35us; 55us; 36us; 57us; 54us; 21us; 57us; 32us; 58us; 17us; 59us; 19us; 60us; 45us; 61us; 47us; 62us; 49us; 63us; 77us; 64us; 53us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 5us; 32768us; 50us; 38us; 51us; 39us; 52us; 40us; 53us; 42us; 65us; 44us; 0us; 16400us; 5us; 32768us; 50us; 38us; 51us; 39us; 52us; 40us; 53us; 42us; 65us; 44us; 0us; 16401us; 5us; 32768us; 50us; 38us; 51us; 39us; 52us; 40us; 53us; 42us; 65us; 44us; 5us; 32768us; 50us; 38us; 51us; 39us; 52us; 40us; 53us; 42us; 65us; 44us; 1us; 16403us; 55us; 25us; 1us; 32768us; 55us; 25us; 12us; 32768us; 34us; 51us; 35us; 55us; 36us; 57us; 54us; 22us; 57us; 31us; 58us; 17us; 59us; 19us; 60us; 45us; 61us; 47us; 62us; 49us; 63us; 77us; 64us; 53us; 2us; 32768us; 38us; 27us; 56us; 28us; 0us; 16402us; 12us; 32768us; 34us; 51us; 35us; 55us; 36us; 57us; 54us; 22us; 57us; 31us; 58us; 17us; 59us; 19us; 60us; 45us; 61us; 47us; 62us; 49us; 63us; 77us; 64us; 53us; 1us; 32768us; 38us; 30us; 0us; 16404us; 5us; 32768us; 50us; 38us; 51us; 39us; 52us; 40us; 53us; 42us; 65us; 44us; 5us; 32768us; 50us; 38us; 51us; 39us; 52us; 40us; 53us; 42us; 65us; 44us; 1us; 32768us; 37us; 35us; 1us; 16406us; 37us; 35us; 12us; 32768us; 34us; 51us; 35us; 55us; 36us; 57us; 54us; 22us; 57us; 31us; 58us; 17us; 59us; 19us; 60us; 45us; 61us; 47us; 62us; 49us; 63us; 77us; 64us; 53us; 1us; 32768us; 38us; 37us; 0us; 16405us; 0us; 16407us; 0us; 16408us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16413us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16414us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16415us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16416us; 1us; 32768us; 66us; 54us; 0us; 16417us; 1us; 32768us; 66us; 56us; 0us; 16418us; 1us; 32768us; 66us; 58us; 1us; 32768us; 37us; 59us; 12us; 32768us; 34us; 51us; 35us; 55us; 36us; 57us; 54us; 22us; 57us; 31us; 58us; 17us; 59us; 19us; 60us; 45us; 61us; 47us; 62us; 49us; 63us; 77us; 64us; 53us; 1us; 32768us; 38us; 61us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16427us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16428us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16429us; 11us; 32768us; 39us; 62us; 40us; 63us; 41us; 64us; 42us; 65us; 43us; 66us; 44us; 67us; 45us; 68us; 46us; 69us; 47us; 71us; 48us; 73us; 49us; 75us; 0us; 16430us; 1us; 32768us; 29us; 78us; 15us; 32768us; 8us; 97us; 9us; 98us; 10us; 99us; 11us; 100us; 12us; 101us; 13us; 102us; 21us; 114us; 22us; 115us; 23us; 116us; 24us; 117us; 25us; 118us; 26us; 119us; 27us; 120us; 28us; 129us; 31us; 132us; 1us; 32768us; 30us; 80us; 0us; 16431us; 0us; 16432us; 7us; 32768us; 8us; 97us; 9us; 98us; 10us; 99us; 11us; 100us; 12us; 101us; 13us; 102us; 31us; 132us; 0us; 16433us; 14us; 32768us; 8us; 97us; 9us; 98us; 10us; 99us; 11us; 100us; 12us; 101us; 13us; 102us; 21us; 114us; 22us; 115us; 23us; 116us; 24us; 117us; 25us; 118us; 26us; 119us; 27us; 120us; 31us; 132us; 0us; 16434us; 7us; 32768us; 8us; 97us; 9us; 98us; 10us; 99us; 11us; 100us; 12us; 101us; 13us; 102us; 31us; 132us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 6us; 16441us; 8us; 97us; 9us; 98us; 10us; 99us; 11us; 100us; 12us; 101us; 13us; 102us; 0us; 16442us; 10us; 32768us; 7us; 113us; 14us; 103us; 15us; 104us; 21us; 114us; 22us; 115us; 23us; 116us; 24us; 117us; 25us; 118us; 26us; 119us; 27us; 120us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 10us; 16452us; 7us; 113us; 19us; 111us; 20us; 112us; 21us; 114us; 22us; 115us; 23us; 116us; 24us; 117us; 25us; 118us; 26us; 119us; 27us; 120us; 0us; 16453us; 3us; 16459us; 16us; 108us; 17us; 109us; 18us; 110us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 0us; 16460us; 0us; 16461us; 0us; 16462us; 0us; 16463us; 0us; 16464us; 0us; 16465us; 0us; 16466us; 0us; 16467us; 4us; 16468us; 3us; 122us; 4us; 123us; 5us; 124us; 6us; 125us; 0us; 16469us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 2us; 16475us; 16us; 127us; 17us; 128us; 0us; 16473us; 0us; 16474us; 0us; 16476us; 1us; 16477us; 31us; 132us; 0us; 16478us; 9us; 32768us; 0us; 138us; 1us; 139us; 2us; 140us; 8us; 97us; 9us; 98us; 10us; 99us; 11us; 100us; 12us; 101us; 13us; 102us; 6us; 32768us; 8us; 97us; 9us; 98us; 10us; 99us; 11us; 100us; 12us; 101us; 13us; 102us; 1us; 32768us; 32us; 135us; 0us; 16479us; 1us; 32768us; 32us; 137us; 0us; 16480us; 0us; 16481us; 0us; 16482us; 0us; 16483us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 13us; 14us; 15us; 16us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 47us; 48us; 54us; 55us; 61us; 67us; 69us; 71us; 84us; 87us; 88us; 101us; 103us; 104us; 110us; 116us; 118us; 120us; 133us; 135us; 136us; 137us; 138us; 150us; 151us; 152us; 153us; 154us; 166us; 167us; 179us; 180us; 192us; 193us; 205us; 206us; 208us; 209us; 211us; 212us; 214us; 216us; 229us; 231us; 232us; 233us; 234us; 235us; 236us; 237us; 238us; 239us; 251us; 252us; 264us; 265us; 277us; 278us; 290us; 291us; 293us; 309us; 311us; 312us; 313us; 321us; 322us; 337us; 338us; 346us; 347us; 348us; 349us; 350us; 351us; 352us; 359us; 360us; 371us; 372us; 373us; 374us; 375us; 376us; 377us; 378us; 379us; 380us; 391us; 392us; 396us; 397us; 398us; 399us; 400us; 401us; 402us; 403us; 404us; 405us; 406us; 407us; 408us; 409us; 414us; 415us; 416us; 417us; 418us; 421us; 422us; 423us; 424us; 426us; 427us; 437us; 444us; 446us; 447us; 449us; 450us; 451us; 452us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 5us; 3us; 7us; 5us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 5us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 4us; 1us; 2us; 2us; 3us; 1us; 2us; 2us; 3us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 1us; 1us; 1us; 2us; 4us; 3us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 8us; 8us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 17us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 21us; 21us; 22us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 23us; 24us; 24us; 25us; 25us; 25us; 25us; 25us; 25us; 25us; 26us; 26us; 26us; 26us; 26us; 26us; 26us; 27us; 27us; 27us; 27us; 27us; 28us; 28us; 28us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 32us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 16397us; 16398us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 16407us; 16408us; 65535us; 16409us; 16410us; 16411us; 16412us; 65535us; 16413us; 65535us; 16414us; 65535us; 16415us; 65535us; 16416us; 65535us; 16417us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 16420us; 16421us; 16422us; 16423us; 16424us; 16425us; 16426us; 65535us; 16427us; 65535us; 16428us; 65535us; 16429us; 65535us; 16430us; 65535us; 65535us; 65535us; 16431us; 16432us; 65535us; 16433us; 65535us; 16434us; 65535us; 16435us; 16436us; 16437us; 16438us; 16439us; 16440us; 65535us; 16442us; 65535us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 16449us; 16450us; 16451us; 65535us; 16453us; 65535us; 16454us; 16455us; 16456us; 16457us; 16458us; 16460us; 16461us; 16462us; 16463us; 16464us; 16465us; 16466us; 16467us; 65535us; 16469us; 16470us; 16471us; 16472us; 65535us; 16473us; 16474us; 16476us; 65535us; 16478us; 65535us; 65535us; 65535us; 16479us; 65535us; 16480us; 16481us; 16482us; 16483us; |]
let _fsyacc_reductions ()  =    [| 
# 593 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  SyntaxTree.Command list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'script)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                     _1 
                   )
# 32 "Parser.fsy"
                 :  SyntaxTree.Command list ));
# 613 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                      _1 
                   )
# 35 "Parser.fsy"
                 : 'script));
# 624 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                  [_1] 
                   )
# 38 "Parser.fsy"
                 : 'commandList));
# 635 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                              _1::_2 
                   )
# 39 "Parser.fsy"
                 : 'commandList));
# 647 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'move)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                               _1 
                   )
# 42 "Parser.fsy"
                 : 'command));
# 658 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'go)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                             _1 
                   )
# 43 "Parser.fsy"
                 : 'command));
# 669 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'walk)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                               _1 
                   )
# 44 "Parser.fsy"
                 : 'command));
# 680 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'shoot)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                _1 
                   )
# 45 "Parser.fsy"
                 : 'command));
# 691 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'name)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                               _1 
                   )
# 46 "Parser.fsy"
                 : 'command));
# 702 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'announce)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                   _1 
                   )
# 47 "Parser.fsy"
                 : 'command));
# 713 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'on)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                             _1 
                   )
# 48 "Parser.fsy"
                 : 'command));
# 724 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'set)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                              _1 
                   )
# 49 "Parser.fsy"
                 : 'command));
# 735 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clear)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                _1 
                   )
# 50 "Parser.fsy"
                 : 'command));
# 746 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditional)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                      _1 
                   )
# 51 "Parser.fsy"
                 : 'command));
# 757 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'playMusic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                    _1 
                   )
# 52 "Parser.fsy"
                 : 'command));
# 768 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'flag)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                   Set _2 
                   )
# 55 "Parser.fsy"
                 : 'set));
# 779 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'flag)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                     Clear _2 
                   )
# 58 "Parser.fsy"
                 : 'clear));
# 790 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'flag)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                       If(_2, _4) 
                   )
# 61 "Parser.fsy"
                 : 'conditional));
# 802 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'flag)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                          If(_3, [_1]) 
                   )
# 62 "Parser.fsy"
                 : 'conditional));
# 814 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'flag)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                                        IfElse(_2, _4, _6) 
                   )
# 63 "Parser.fsy"
                 : 'conditional));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'flag)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                         Unless(_2, _4) 
                   )
# 64 "Parser.fsy"
                 : 'conditional));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'flag)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                              Unless(_3, [_1]) 
                   )
# 65 "Parser.fsy"
                 : 'conditional));
# 851 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                  Aligned 
                   )
# 68 "Parser.fsy"
                 : 'flag));
# 861 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                   Touching 
                   )
# 69 "Parser.fsy"
                 : 'flag));
# 871 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                            Blocked _2 
                   )
# 70 "Parser.fsy"
                 : 'flag));
# 882 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                    Energized 
                   )
# 71 "Parser.fsy"
                 : 'flag));
# 892 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'userDefined)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                      UserDefined _1 
                   )
# 72 "Parser.fsy"
                 : 'flag));
# 903 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                             FlagName _1 
                   )
# 75 "Parser.fsy"
                 : 'userDefined));
# 914 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                         Move _2 
                   )
# 78 "Parser.fsy"
                 : 'move));
# 925 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                       Go _2 
                   )
# 81 "Parser.fsy"
                 : 'go));
# 936 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                         Go _2 
                   )
# 84 "Parser.fsy"
                 : 'walk));
# 947 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                          Shoot _2 
                   )
# 87 "Parser.fsy"
                 : 'shoot));
# 958 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                            Name _2 
                   )
# 90 "Parser.fsy"
                 : 'name));
# 969 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                          Announce _2 
                   )
# 93 "Parser.fsy"
                 : 'announce));
# 980 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'commandList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                       On(_2, _4) 
                   )
# 96 "Parser.fsy"
                 : 'on));
# 992 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                North 
                   )
# 99 "Parser.fsy"
                 : 'direction));
# 1002 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                South 
                   )
# 100 "Parser.fsy"
                 : 'direction));
# 1012 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                               East 
                   )
# 101 "Parser.fsy"
                 : 'direction));
# 1022 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                               West 
                   )
# 102 "Parser.fsy"
                 : 'direction));
# 1032 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                               Seek 
                   )
# 103 "Parser.fsy"
                 : 'direction));
# 1042 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                               Flow 
                   )
# 104 "Parser.fsy"
                 : 'direction));
# 1052 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                               Idle 
                   )
# 105 "Parser.fsy"
                 : 'direction));
# 1062 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                       Clockwise _2 
                   )
# 106 "Parser.fsy"
                 : 'direction));
# 1073 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                        CounterClockwise _2 
                   )
# 107 "Parser.fsy"
                 : 'direction));
# 1084 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                         RandomPerpendicular _2 
                   )
# 108 "Parser.fsy"
                 : 'direction));
# 1095 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'direction)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                        Opposite _2 
                   )
# 109 "Parser.fsy"
                 : 'direction));
# 1106 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'song)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                        Play _3 
                   )
# 112 "Parser.fsy"
                 : 'playMusic));
# 1117 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'phrase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                 Composition(BeatsPerMinute(100), Major(NaturalKey(C)), [Vocal _1]) 
                   )
# 115 "Parser.fsy"
                 : 'song));
# 1128 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'phrase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                     Composition(BeatsPerMinute(100), _1, [Vocal _2]) 
                   )
# 116 "Parser.fsy"
                 : 'song));
# 1140 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tempo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'phrase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                       Composition(_1, Major(NaturalKey(C)), [Vocal _2]) 
                   )
# 117 "Parser.fsy"
                 : 'song));
# 1152 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tempo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'key)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'phrase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                           Composition(_1, _2, [Vocal _3]) 
                   )
# 118 "Parser.fsy"
                 : 'song));
# 1165 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'voiceList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                    Composition(BeatsPerMinute(100), Major(NaturalKey(C)), _1) 
                   )
# 119 "Parser.fsy"
                 : 'song));
# 1176 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tempo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'voiceList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                          Composition(_1, Major(NaturalKey(C)), _2)
                   )
# 120 "Parser.fsy"
                 : 'song));
# 1188 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'key)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'voiceList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                        Composition(BeatsPerMinute(100), _1, _2) 
                   )
# 121 "Parser.fsy"
                 : 'song));
# 1200 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tempo)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'key)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'voiceList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                              Composition(_1, _2, _3) 
                   )
# 122 "Parser.fsy"
                 : 'song));
# 1213 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteGroups)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                     NoteGroups _1 
                   )
# 125 "Parser.fsy"
                 : 'phrase));
# 1224 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteGroup)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                    [_1] 
                   )
# 128 "Parser.fsy"
                 : 'noteGroups));
# 1235 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteGroup)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteGroups)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                               _1::_2 
                   )
# 129 "Parser.fsy"
                 : 'noteGroups));
# 1247 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'duration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'musicNoteList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                 _1, _2 
                   )
# 132 "Parser.fsy"
                 : 'noteGroup));
# 1259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                Whole 
                   )
# 135 "Parser.fsy"
                 : 'duration));
# 1269 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                               Half 
                   )
# 136 "Parser.fsy"
                 : 'duration));
# 1279 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                  Quarter 
                   )
# 137 "Parser.fsy"
                 : 'duration));
# 1289 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                 Eighth 
                   )
# 138 "Parser.fsy"
                 : 'duration));
# 1299 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                    Sixteenth 
                   )
# 139 "Parser.fsy"
                 : 'duration));
# 1309 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                        ThirtySecond 
                   )
# 140 "Parser.fsy"
                 : 'duration));
# 1319 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'duration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                    TimeAndAHalf _1 
                   )
# 141 "Parser.fsy"
                 : 'duration));
# 1330 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'duration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                             OneThird _1 
                   )
# 142 "Parser.fsy"
                 : 'duration));
# 1341 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'musicNote)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                    [_1] 
                   )
# 145 "Parser.fsy"
                 : 'musicNoteList));
# 1352 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'musicNote)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'musicNoteList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                  _1::_2 
                   )
# 146 "Parser.fsy"
                 : 'musicNoteList));
# 1364 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                         Sharp _1 
                   )
# 149 "Parser.fsy"
                 : 'musicNote));
# 1375 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                        Flat _1 
                   )
# 150 "Parser.fsy"
                 : 'musicNote));
# 1386 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                           Natural _1 
                   )
# 151 "Parser.fsy"
                 : 'musicNote));
# 1397 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'musicNote)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                              RaiseOctave _1 
                   )
# 152 "Parser.fsy"
                 : 'musicNote));
# 1408 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'musicNote)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                LowerOctave _1 
                   )
# 153 "Parser.fsy"
                 : 'musicNote));
# 1419 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                   Default _1 
                   )
# 154 "Parser.fsy"
                 : 'musicNote));
# 1430 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                               Rest 
                   )
# 155 "Parser.fsy"
                 : 'musicNote));
# 1440 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                  A 
                   )
# 158 "Parser.fsy"
                 : 'noteName));
# 1450 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                  B 
                   )
# 159 "Parser.fsy"
                 : 'noteName));
# 1460 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                  C 
                   )
# 160 "Parser.fsy"
                 : 'noteName));
# 1470 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                  D 
                   )
# 161 "Parser.fsy"
                 : 'noteName));
# 1480 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                  E 
                   )
# 162 "Parser.fsy"
                 : 'noteName));
# 1490 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                  F 
                   )
# 163 "Parser.fsy"
                 : 'noteName));
# 1500 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                  G 
                   )
# 164 "Parser.fsy"
                 : 'noteName));
# 1510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'keyName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                  Major _1 
                   )
# 167 "Parser.fsy"
                 : 'key));
# 1521 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'keyName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                        Major _1 
                   )
# 168 "Parser.fsy"
                 : 'key));
# 1532 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'keyName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                         HarmonicMinor _1 
                   )
# 169 "Parser.fsy"
                 : 'key));
# 1543 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'keyName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                            MelodicMinorAscending _1 
                   )
# 170 "Parser.fsy"
                 : 'key));
# 1554 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'keyName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                             MelodicMinorDescending _1 
                   )
# 171 "Parser.fsy"
                 : 'key));
# 1565 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                         SharpKey _1 
                   )
# 174 "Parser.fsy"
                 : 'keyName));
# 1576 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                        FlatKey _1 
                   )
# 175 "Parser.fsy"
                 : 'keyName));
# 1587 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'noteName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                   NaturalKey _1 
                   )
# 176 "Parser.fsy"
                 : 'keyName));
# 1598 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                              BeatsPerMinute _1 
                   )
# 179 "Parser.fsy"
                 : 'tempo));
# 1609 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'voice)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                [_1] 
                   )
# 182 "Parser.fsy"
                 : 'voiceList));
# 1620 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'voice)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'voiceList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                          _1::_2 
                   )
# 183 "Parser.fsy"
                 : 'voiceList));
# 1632 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'instrument)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'phrase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                              Instrumental(_2, _3) 
                   )
# 186 "Parser.fsy"
                 : 'voice));
# 1644 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'phrase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                   Vocal _2 
                   )
# 187 "Parser.fsy"
                 : 'voice));
# 1655 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                              Saxophone 
                   )
# 190 "Parser.fsy"
                 : 'instrument));
# 1665 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                 Guitar 
                   )
# 191 "Parser.fsy"
                 : 'instrument));
# 1675 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                               Piano 
                   )
# 192 "Parser.fsy"
                 : 'instrument));
|]
# 1686 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 70;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  SyntaxTree.Command list  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
